package com.company;

import java.util.ArrayList;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        ArrayList<Container> listOfContainers = new ArrayList<>();
        byte command;
        while (true) {
            System.out.println("&&&&&& MENU &&&&&&&");
            System.out.println("1 - MAKE CONTAINER");
            System.out.println("2 - FILL CONTAINER");
            System.out.println("3 - CLEAR CONTAINER");
            System.out.println("4 - SHOW CONTAINER");
            System.out.println("5 - CONTAINERS LIST");
            System.out.println("6 - CONTAINERS MENU");
            System.out.println("7 - EXIT");
            command = in.nextByte();
            switch (command) {
                case 1:
                    System.out.print("enter container's max length: ");
                    listOfContainers.add(new Container(in.nextInt()));
                    System.out.println("your container's index is [" + listOfContainers.size() + "]");
                    break;
                case 2:
                    System.out.print("enter container's index: ");
                    int index = in.nextInt();
                    if (index > listOfContainers.size() || index < 0) {
                        System.out.println("ERROR! CONTAINER not found");
                        break;
                    }
                    System.out.println("Enter " + listOfContainers.get(index-1).maxSize() + " strings (each in different line):");
                    in.nextLine();
                    for (int i = 0, n = listOfContainers.get(index-1).maxSize(); i < n; i++) {
                        listOfContainers.get(index-1).add(in.nextLine());
                    }
                    break;
                case 3:
                    System.out.print("enter container's index: ");
                    int delIndex = in.nextInt();
                    if (delIndex > listOfContainers.size() || delIndex < 1) {
                        System.out.println("ERROR! CONTAINER not found");
                        break;
                    }
                    listOfContainers.get(delIndex-1).clear();
                    System.out.println("CONTAINER IS EMPTY!");
                    break;
                case 4:
                    System.out.print("enter container's index: ");
                    int showIndex = in.nextInt();
                    if (showIndex > listOfContainers.size() || showIndex < 1) {
                        System.out.println("ERROR! CONTAINER not found");
                        break;
                    }
                    System.out.println(listOfContainers.get(showIndex-1).toString());
                    break;
                case 5:
                    for (int i = 0; i < listOfContainers.size(); i++) {
                        System.out.println("[" + (i+1) + "] - data: [" + listOfContainers.get(i).size() +
                                "/" + listOfContainers.get(i).maxSize() + "]");
                    }
                    break;
                case 6:
                    System.out.print("enter container's index: ");
                    int menuIndex = in.nextInt();
                    if (menuIndex > listOfContainers.size() || menuIndex < 1) {
                        System.out.println("ERROR! CONTAINER not found");
                        break;
                    }
                    System.out.println("&&&&&&&& CONTAINER MENU &&&&&&&&&&&");
                    System.out.println("1 - ADD");
                    System.out.println("2 - REMOVE");
                    System.out.println("3 - TURN INTO AN ARRAY AND ITERATE THROUGH");
                    System.out.println("4 - CURRENT SIZE");
                    System.out.println("5 - MAXIMUM SIZE");
                    System.out.println("6 - CHECK STRING");
                    System.out.println("7 - CHECK SUB_CONTAINER");
                    System.out.println("8 - SERIALIZE");
                    System.out.println("9 - DESERIALIZE");
                    System.out.println("10 - GET ELEMENT");
                    System.out.println("11 - GET INDEX");
                    System.out.println("12 - QUICK_SORT");
                    System.out.println("13 - ITERATE (FOREACH)");
                    System.out.println("14 - ITERATE (WHILE)" );
                    System.out.println("15 - TASK FROM PREVIOUS LAB");
                    System.out.println("16 - EXIT");
                    command = in.nextByte();
                    switch (command) {
                        case 1:
                            System.out.println("enter element:");
                            in.nextLine();
                            listOfContainers.get(menuIndex-1).add(in.nextLine());
                            break;
                        case 2:
                            System.out.println("enter element:");
                            in.nextLine();
                            listOfContainers.get(menuIndex-1).remove(in.nextLine());
                            break;
                        case 3:
                            for (String i : listOfContainers.get(menuIndex-1).toArray()) {
                                System.out.println(i);
                            }
                            break;
                        case 4:
                            System.out.println(listOfContainers.get(menuIndex-1).size());
                            break;
                        case 5:
                            System.out.println(listOfContainers.get(menuIndex-1).maxSize());
                            break;
                        case 6:
                            System.out.println("enter string to find:");
                            in.nextLine();
                            System.out.println(listOfContainers.get(menuIndex-1).contains(in.nextLine()));
                            break;
                        case 7:
                            System.out.print("enter index: ");
                            int subContainerIndex = in.nextInt();
                            if (subContainerIndex > listOfContainers.size() || subContainerIndex < 1) {
                                System.out.println("not found!");
                                break;
                            }
                            System.out.println("[" + subContainerIndex + "] is sub container of [" + menuIndex +
                                    "] - " + listOfContainers.get(menuIndex-1).containsAll(listOfContainers
                                    .get(subContainerIndex-1)));
                            break;
                        case 8:
                            System.out.println("enter file name(name.format): ");
                            in.nextLine();
                            listOfContainers.get(menuIndex-1).serialize(in.nextLine());
                            break;
                        case 9:
                            System.out.println("enter file name(name.format): ");
                            in.nextLine();
                            listOfContainers.get(menuIndex-1).deserialize(in.nextLine());
                            break;
                        case 10:
                            System.out.print("enter index: ");
                            listOfContainers.get(menuIndex-1).get(in.nextInt());
                            break;
                        case 11:
                            System.out.println("enter element:");
                            in.nextLine();
                            listOfContainers.get(menuIndex-1).indexOf(in.nextLine());
                            break;
                        case 12:
                            listOfContainers.get(menuIndex-1).sort();
                            System.out.println("done!");
                            break;
                        case 13:
                            for (String i : listOfContainers.get(menuIndex-1)) {
                                System.out.println(i);
                            }
                            break;
                        case 14:
                            MyIterator i = (MyIterator) listOfContainers.get(menuIndex-1).iterator();
                            while (i.hasNext()) {
                                System.out.println(i.next());
                            }
                            break;
                        case 15:
                            System.out.println("The calculation starts now...");
                            String string = listOfContainers.get(menuIndex-1).toString();
                            int counter = 0, wordStart = 0;
                            ArrayList<String> words = new ArrayList<String>();
                            boolean word = false;
                            while(counter != string.length()) {
                                if((Character.isDigit(string.charAt(counter)) ||
                                        Character.isAlphabetic(string.charAt(counter))) && !word) {
                                    wordStart = counter;
                                    word = true;
                                }
                                else if(!Character.isDigit(string.charAt(counter)) &&
                                        !Character.isAlphabetic(string.charAt(counter)) && word) {
                                    words.add(string.substring(wordStart, counter));
                                    word = false;
                                }
                                counter++;
                            }
                            for(int num=0;num<words.size();num++){
                                int length = words.get(num).length();
                                     if(words.get(num).charAt(0)==words.get(num).charAt(length-1)){
                                         System.out.println(words.get(num));
                                     }
                            }
                            break;
                        case 16:
                            break;
                        default:
                            System.out.println("UNKNOWN COMMAND!");
                    }
                    break;
                case 7:
                    System.out.println("THANKS FOR USING, GOODBYE");
                    System.exit(0);
                default:
                    System.out.println("UNKNOWN COMMAND!");
            }
        }
    }
}
